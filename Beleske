ctrl + shift + F10 -> pokrecemo fajl
sout -> System.out.println()
psvm -> main method
tab -> dopuna
ctrl + shift + / -> block code
ctrl + alt + l -> reformat code
public static final String INVALID_STRING = "Invalid Value";

################################################################
6.10.2021:
    * 36. Logical AND operator
        && u if klauzuli kada tesiramo dva uslova
        Lakse za citanje - odvojiti u zagrade levu i desnu stranu
    * 37. Logical OR operator
        ||
    * 38. Assignment Operator VS Eaquals to Operator
        Ako za ne boolean vrednost stavimo
            if (prom = neki_br)
        prijavice gresku
        Za boolean vrednost nece prijaviti gresku vec
        tu vrednost dodeliti
            if (isCar = true) -> procice

        Pojednostavljenje ispisa za boolean:
            if(isCar) -> da li je true
            if(!isCar) -> da li nije

    * 39. Ternary Operator
        boolean wasCar = isCar ? true : false;

    * 40. Operator Precedence and Operator Challenge
        -> link summary of operators oracle sajt
        -> Java operatorc precedence table -> prioritet operatora

    * 41. First steps summary
    * 42. End of remaster

    // Section 4
    * 43. Introduction

    * 44. Keywords and Expressions
        -> link list of Java keywords
        Expressions are building blocks of all Java programms, built
            with variables, values and operators, also with method calls
        When we add a valid Java datatype in front of an expression we create
        a valid Java statement (and a semicolon on the end)

    * 45. Statements, whitespace and indentation
        Statements: assignment, method calls
                    usually ends with ;
                    it can be in more than one line
                    it can be more statements in one line but is not easy readable

        Whitespace: space around operators, statements, etc.
                    Java doesn't mind how many we have it deletes them internaly

        Indentation: to make code readable, to show the code flow
                    in IntelliJ: Code-> Reformat Code == Ctrl + Alt + L

    * 46. Code blocks and the if then else control statements
        if statement: when we have one line we can write without {} but it is
        recomended to use it always so we don't forget to add it if we add more
        to our if

        code block: we can use variables created outside the block, but variables
                    created inside it can't be used outside that block
        inside code block = scope

        Disadvantages when changing variables to count another result:
         copying code and losing info about previous values,
         duplicating code -> we can forget to change code in all places.
    * 47. if then else recap
          /
        \/
########################################################################
7.10.2021.

    * 48. Methods
        We can't put method inside another method.
        It has to be inside class.

        void - don't return anything
        return -1 -> in programming it indicates some error,
                     in search algorithms it's value not found

    * 49. More on methods and a challenge
        void method is usually known as a procedure
        method which returns something is known as a function
        think about edge cases

    * 50. Method challenge - final code changes

    * 51. DiffMerge Tool Introduction
        -> program that helps you to visually compare and merge files on any OS
        -> ex. it helps when you make a typo and get stuck
        -> After download of his code using DiffMerge we can find where we are stuck
        -> we can compare files and even whole folder

    * 52. Install DiffMerge
        Link: sourcegear.com/diffmerge

    * 53. Using DiffMerge
        Folder with code and second with mistake
        Open DiffMerge
        Choose folders or files you want to compare
        There is option to apply changes from the left and then save them.

    * 54. Coding excercises
        SampleCodingExcercise
            src -> desni klik -> new Java class
        Coding excercise doesn't need main but we can use it to test

    * 55. Coding Excercises Example part 1
        new project without template -> Speed converter
        2 classes in src -> SpeedConverter.java and Main.java

        redundant - we calculated and then returned it, insetead we can only return the calculation

    * 56. Coding Excercises Example part 2
        -> another method
        In Main psvm -> main method
        For calling out methods class.method

    * 57. Coding Excercises Example part 3
        -> in Udemy tests the code

    *  Coding Excercise 1: Speed Converter
        -> Entered it in Udemy

    *  Coding Excercise 2: MegaBytes Converter
    *  Coding Excercise 3: Barking Dog
    *  Coding Excercise 4: Leap Year Calculator
    *  Coding Excercise 5: Decimal Comparator
    *  Coding Excercise 6: Equal Sum Checker
    *  Coding Excercise 7: Teen Number Checker

################################################################
10.10.2021
    * 58. Method Overloading
        -> use same method name but with different parameters
        -> in case there is method with certain number of parameters and we create
            another just like that but with different return type ERROR!!
        -> when transforming inches to feet and inches since we need remainers
            it can be done
            double feet = (int) inches/12; -> then int is cast to double

    * 59. Method Overloading Recap
        In method overloading we can call the method with differenc number
        of parameters
        println -> example of method overloading
        -> improves code readability and re-usability
        -> easier to remember one method name instead of multiple names
        -> achieves consistency in naming
        -> give programmers flexibility to call a similar method with different
        types of data

    * 60. Seconds and Minutes Challenge
    * 61. Bonus part for Challenge
        constant for invalid value string => needs to be outside methods
        We can't assign value to the final value

#################################################################
11.10.2021.
    * Coding Excercise 8: Area Calculator
    * Coding Excercise 9: Minutes to Years and Days Calculator
    * Coding Excercise 10: Equality Printer
    * Coding Excercise 11: Playing Cat

  ============================================================
  SECTION 5: Control Flow Statements