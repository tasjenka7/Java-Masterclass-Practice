ctrl + element in code -> it opens docs (It works with objects)


07.12.2021.
	
	99. Arrays
		data structure to store a sequence of elements of the same type
		works with primitive types and also objects
		Declaration -> after type [] --> int[] myVars = new int[10];
		Arrays go from 0 so myVars[6] is actually 7th el.
		
		in for loop use .length 'cause if we change the length of our array everything
		else in our code is up to date
		
		we get an error if we try to access element that does not exist
		
		\r to go to the next line when it waits for input
	100. Arrays (Challenge Exercise)
		int[] copyArr = Arrays.copyOf(array, array.length)

	CE 41 = 100.
-----------------------------------------
-----------------------------------------
03.01.2022.

    101. Arrays Recap
        Default values of: numeric array = zero
                           boolean array = false
                           string or other objects = null
        Zero indexed, 0 - (length - 1)
        ArrayIndexOutOfBound -> if we try to access element out of range
        new operator for creating
        in inline initialization => {, , ,} --> anonymous array
        can't access negative location

    102. References Types vs Value Types
        Value types -> int, double...
                    -> when we assign a value place for it is alocated in memory,
                    and every variable has its place. ex. val1 = 10;
                                                          val2 = val1;
                                                          val2++;
                                                          -> val1 = 10, val2 = 11
        Reference types -> arrays, strings,
                    everytime we see new we know a new object is created
                    they are used by reference
                    for array -> a reference to the array in memory
                    so we can't access the object directly
            int[] myIntArray = new int[5];
            int[] anotherArray = myIntArray;
            -> 2 references to the same array in memory, we change in one both are changed

            Arrays.toString(myIntArray) -> array to string separated by comma

            if we have a method, we pass a reference type to it so for an array above we now
            have 3 references

            dereference => changing reference of an array with new array...

    103. Minimum Element Challenge
        REMEMBER: scanner.nextLine() for any junk we don't expect
    CE 42 = 103.

===========================================================
13.01.2022.
	104 Reverse Array Challenge
	
		reminder: wher it is void method then we call it methodName(array/params)

	CE 43 = 104
	
	105. Arrays and ArrayLists
		
		resizing array => save elems in another array, say that our array is new array of given number
		and then copy elements back to it --> without array lists
		
		In Java List -> An ordered collection (sequence) 
		Array Lists -> inherits from Lists, resizable-array implementation of the List interface, it handles 
						resizing automaticly
					-> can save object
					-> have to tell it what kind of objects it holds
					-> ArrayList<type of Object>
		
					-> it's actually a class so thats why it has () in creating a new one
					-> adding element-> arrayListName.add(element)
					.get(position) -> to get element
					.size()
					.set(position, element) -> modify
					.remove(position) -> remove
	106. Arrays and ArrayLists Part 2
	
					.contains()
					.getIndexOf()
					
					REMINDER: Always think of human numbers vs computer numbers, when person enters 
								item number 3 its computers item 2 so deduct 1!!
	
	107. Arrays and ArrayLists Part 3
				refactoring class we created
				
				Copy elements from one to another -> newArray.addAll(groceryList.getGroceryList()) // we need a getter
				Another way -> ArrayList<String> nextArray = new ArrayList<String>(groceryList.getGroceryList())
				
	108, 109, 110 ArrayLists Challenge
			
	111 Bug fix for challenge
		When updating contact name and changing it to one that already exists
=====================================
16.01.2022.
	112. Autoboxing and Unboxing
	
		We can't do: 
		 ArrayList<int> intArrayList = new ArrayList<int>();
		because int is a primitive type and not a class
		
		One option is to create our own class but that's messy.
		
		Java provides solution for this problem and Autoboxing is all about that
		Integer class -> adding value of i into array list 
								-> intArrList.add(Integer.valueOf(i))
					  -> to get number we have to use getter and .intValue
					  
			Autoboxing -> turning (ex. int) value into (Integer) class value
			Unboxing -> getting (Integer) class value and turning it into primitive type
			
			How Java helps us:
				Integer myIntValue = 56; //At compile time Integer.valueOf(56)
				int myInt = myIntValue; // myInt.intValue();

21.01.2022.
	113, 114, 115 Autoboxing and unboxing challenge
		
-----------------------
30.01.2022.
	116. LinkedList
	
		Internaly Java allocates 4bytes of memory for each integer (so it can save even biggest value of int)
		We have indexes, in memory it has its address (ex. 100, 104, 108...) and value

		For all primitive types -> 8 bytes for double. We can calculate address for every type 
		
		String can have variable size so we have 
		index, address, string address(don't have to be continuous) and then new location with address and string itself
		
		when we are done Java garbage collection deals with it (behind the scenes)
		
		In Java we don't have pointers.
		
		In ArrayList if we have to add or remove an item the whole list has to move down or up to fill space.
		That takes a lot of time. (with arr.add(position, element) it add element to the position and moves all other for one space down)
		
		LinkedList is an alternative to an array. Each element holds a link to the item it follows it.
		
		null is when nothing is following
		
		ex. Sydney -> Melbourne -> Brisbane -> Perth -> Canberra -> Adelade -> Darwin -> null 
		And we move that Brisbane -> Canberra then Perth is showing to Canberra but as nothing points to
		 it in garbage collection time it will be destroyed
		 
		Iterator<String> i = linkedList.iterator(); -> something similar to for loop 
		while(i.hasNext()){
			... i.next() -> moving to the next value and returning current value
		}
		
		Advantages of LinkedList:
			we'll add cities in alphabetical order 
			ListIterator
			ListIterator<String> stringListIterator = linkedList.listIterator(); // doesn't point to the first record


		Not good idea to write methods that return and use .next
		
		LinkedList are implemented as double linked list so we can go back or forward, .previous and .next 
		
		When we want to be able to go back and forward then we have to keep track of our way
================================
31.01.2022.
	119,120 LinkedList challenge
		Alternative way for for loop for objects:
			for(Song checkedSong: this.songs){} --> this.songs is ArrayList of songs
