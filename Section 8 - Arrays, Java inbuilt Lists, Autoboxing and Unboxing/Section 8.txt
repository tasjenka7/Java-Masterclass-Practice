07.12.2021.
	
	99. Arrays
		data structure to store a sequence of elements of the same type
		works with primitive types and also objects
		Declaration -> after type [] --> int[] myVars = new int[10];
		Arrays go from 0 so myVars[6] is actually 7th el.
		
		in for loop use .length 'cause if we change the length of our array everything
		else in our code is up to date
		
		we get an error if we try to access element that does not exist
		
		\r to go to the next line when it waits for input
	100. Arrays (Challenge Exercise)
		int[] copyArr = Arrays.copyOf(array, array.length)

	CE 41 = 100.
-----------------------------------------
-----------------------------------------
03.01.2022.

    101. Arrays Recap
        Default values of: numeric array = zero
                           boolean array = false
                           string or other objects = null
        Zero indexed, 0 - (length - 1)
        ArrayIndexOutOfBound -> if we try to access element out of range
        new operator for creating
        in inline initialization => {, , ,} --> anonymous array
        can't access negative location

    102. References Types vs Value Types
        Value types -> int, double...
                    -> when we assign a value place for it is alocated in memory,
                    and every variable has its place. ex. val1 = 10;
                                                          val2 = val1;
                                                          val2++;
                                                          -> val1 = 10, val2 = 11
        Reference types -> arrays, strings,
                    everytime we see new we know a new object is created
                    they are used by reference
                    for array -> a reference to the array in memory
                    so we can't access the object directly
            int[] myIntArray = new int[5];
            int[] anotherArray = myIntArray;
            -> 2 references to the same array in memory, we change in one both are changed

            Arrays.toString(myIntArray) -> array to string separated by comma

            if we have a method, we pass a reference type to it so for an array above we now
            have 3 references

            dereference => changing reference of an array with new array...

    103. Minimum Element Challenge
        REMEMBER: scanner.nextLine() for any junk we don't expect
    CE 42 = 103.

===========================================================
13.01.2022.
	104 Reverse Array Challenge
	
		reminder: wher it is void method then we call it methodName(array/params)

	CE 43 = 104
	
	105. Arrays and ArrayLists
		
		resizing array => save elems in another array, say that our array is new array of given number
		and then copy elements back to it --> without array lists
		
		In Java List -> An ordered collection (sequence) 
		Array Lists -> inherits from Lists, resizable-array implementation of the List interface, it handles 
						resizing automaticly
					-> can save object
					-> have to tell it what kind of objects it holds
					-> ArrayList<type of Object>
		
					-> it's actually a class so thats why it has () in creating a new one
					-> adding element-> arrayListName.add(element)
					.get(position) -> to get element
					.size()
					.set(position, element) -> modify
					.remove(position) -> remove
	106. Arrays and ArrayLists Part 2
	
					.contains()
					.getIndexOf()
					
					REMINDER: Always think of human numbers vs computer numbers, when person enters 
								item number 3 its computers item 2 so deduct 1!!
	
	107. Arrays and ArrayLists Part 3
				refactoring class we created
				
				Copy elements from one to another -> newArray.addAll(groceryList.getGroceryList()) // we need a getter
				Another way -> ArrayList<String> nextArray = new ArrayList<String>(groceryList.getGroceryList())
				
	108, 109, 110 ArrayLists Challenge
			
	111 Bug fix for challenge
		When updating contact name and changing it to one that already exists